#!/bin/bash
#
# Runs the edit-server for the chrome plugin.
# Used for systems which don't handle command line programs on startup like Mac OS X
while [ -n "$1" ]; do
  case "$1" in
    -q|--quiet)
      shift
      quiet=1
      ;;
    -k|--kill)
      shift
      kill_server=1
      ;;
    -r|--restart)
      shift
      kill_server=1
      restart_server=1
      ;;
    -h|--help)
      echo "Usage: spawn-edit-server [options]"
      echo "  -q, --quiet    Don't print anything"
      echo "  -r, --restart  Reboot the server"
      echo "  -k, --kill     kill edit-server"
      echo "  -h, --help     This cruft"
      exit 0
      ;;
  esac
done

if [[ -e "${BASH_LOADER_HOME}/bin/edit-server" ]]; then
  edit_server="${BASH_LOADER_HOME}/bin/edit-server"
else
  edit_server="edit-server"
fi

if [[ -d "${HOME}/tmp" ]]; then
  pid_file="${HOME}/tmp/edit-server.pid"
else
  pid_file="/var/run/edit-server.pid"
fi
if [[ -e "$pid_file" ]]; then
  pid=$(cat "$pid_file")
  stat=$(ps -o command= $pid)
  if echo "$stat" | grep -v "$edit_server" > /dev/null 2>&1; then
    [[ $quiet ]] || echo "edit-server is not running. Stale pid file ($pid)."
    rm -f "$pid_file"
    unset pid
  fi
  unset stat
fi

if [[ $kill_server && $pid ]]; then
  rm -f "$pid_file" > /dev/null 2>&1
  kill $pid > /dev/null 2>&1
  [[ $quiet ]] || echo "edit-server process killed. ($pid)" >&2
  [[ $restart_server ]] || exit 0
fi

if [[ -e "$pid_file" ]]; then
  # Server running, ignore.
  [[ $quiet ]] || echo "edit-server currently running. ($pid)" >&2
else
  $edit_server &
  pid=$!
  echo $pid > "$pid_file"
  chmod 400 "$pid_file"
  [[ $quiet ]] || echo "edit-server spawned. ($pid)" >&2
fi
# vim:set ft=sh sw=2:
